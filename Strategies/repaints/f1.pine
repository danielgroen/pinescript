// @version=4

strategy("f1", shorttitle = "f1", overlay=false, pyramiding=200, initial_capital = 1000, commission_type = strategy.commission.percent, commission_value = 0.04, slippage = 0)

// Const

Rsi = rsi(close, 14)
Cci = cci(close, 20)
// 

// TF
rsi_5 = security(syminfo.tickerid, "5", Rsi)
rsi_30 = security(syminfo.tickerid, "30", Rsi)
rsi_60 = security(syminfo.tickerid, "60", Rsi)
cci_5 = security(syminfo.tickerid, "5", Cci)
cci_15 = security(syminfo.tickerid, "15", Cci)
cci_30 = security(syminfo.tickerid, "30", Cci)
// Plot
plot(rsi_5, color=color.red)
plot(rsi_30, color=color.orange)
plot(rsi_60, color=color.green)
plot(cci_5, color=color.purple)
plot(cci_15, color=color.aqua)
plot(cci_30, color=color.black)

// 

// Cond

longCond = rsi_5 > 50 and rsi_30 > 50 and rsi_60 > 55 and cci_5 > 70 and cci_15 > 75 and cci_30 > 80



// data array
price = input(type=input.source, defval=close)

// position size parameter
fixed_position_size_bool = input(false, type=input.bool)
start_position_size = input(1.0, type=input.float)

// logic
first_position_logic = input(defval="RSI oversold", options=["RSI oversold"])

// Take profit
take_profit_percent = input(2.0, type=input.float, title="Take Profit Percent")
takeProfit = price * take_profit_percent / 100 / syminfo.mintick

// martingale
m2 = input(2.0, type=input.float)
m1 = input(2.0, type=input.float)
trade_side = input(defval="Long Only", options=["Long Only"], title="Trade direction")



//////////
// Buy - sell Signal toggle
//////////
Buy = false
Sell = false
if (first_position_logic == "RSI oversold")
    Buy := longCond

// Take profit logic
pricePercent = ( price - strategy.position_avg_price) * 100 / strategy.position_avg_price
if (pricePercent > take_profit_percent)
    Sell := true

// double down logic
BuyMore = pricePercent <= ( m2 * -1 )

//////////
// Position size calculation
//////////
var countMartingale = 0.0 // martingale count

var startUnitSize = 0.0
var unit_size = 0.0
var unit_size_martingale = 0.0

// position size calculation
if (fixed_position_size_bool)
    unit_size := start_position_size
else
    unit_size := strategy.equity * (start_position_size / 100) / price

startUnitSize := unit_size
unit_size_martingale := startUnitSize * pow(m1, (countMartingale))

use_date_range = input(true)
FromYear = input(defval = 2022,title= "from Year", minval = 2018)
FromMonth = input(defval = 1,title= "from Month", minval = 1)
FromDay = input(defval = 1,title= "from Month", minval = 1)
ToYear= input(defval= 2024, title = "to Year", minval=2018)
ToMonth = input(defval = 1,title= "to Month", minval = 1)
ToDay = input(defval = 1,title= "to Month", minval = 1)
in_date_range = (time > timestamp(FromYear, FromMonth, FromDay, 00, 00)) and (time < timestamp(ToYear, ToMonth, ToDay, 23, 50))

//////
if (Buy and (trade_side == "Both" or trade_side == "Long Only") and countMartingale == 0.0 and strategy.equity >= 0)
    strategy.entry("Long", strategy.long, qty=unit_size, when=strategy.position_size <= 0 and in_date_range)
    countMartingale := 1
    Sell := false

if (BuyMore and countMartingale > 0)
    strategy.entry("Long", strategy.long, qty=unit_size, when=strategy.position_size <= 0 and in_date_range)
    countMartingale + 1
    Sell := false

if (Sell or strategy.equity <= 0)
    strategy.close("Long")
    countMartingale := 0
