//@version=4
study(title="UDI by @DaviddTech",  resolution="")
// Getting inputs

macdkstrsi = input(title="Use MACD/RSI/KST etc", type=input.string, defval="MACD", options=["MACD", "Wolfpack", "MACD Histogram", "KST","RSI","CMF","Stochastic RSI","MFI"],group="MAIN STRATEGY SETTINGS")

fast_length = input(title="Fast Length", type=input.integer, defval=12,group="MACD Settings")
slow_length = input(title="Slow Length", type=input.integer, defval=26,group="MACD Settings")
src = input(title="Source", type=input.source, defval=close,group="MACD Settings")
signal_length = input(title="Signal Smoothing", type=input.integer, minval = 1, maxval = 50, defval = 9,group="MACD Settings")
sma_source = input(title="Oscillator MA Type", type=input.string, defval="EMA", options=["SMA", "EMA"],group="MACD Settings")
sma_signal = input(title="Signal Line MA Type", type=input.string, defval="EMA", options=["SMA", "EMA"],group="MACD Settings")

_rsi_len = input(14, minval=1, title="Length",group="RSI Settings")
_rsi_src = input(close, "Source", type = input.source,group="RSI Settings")

_mf_length = input(title="Length", type=input.integer, defval=14, minval=1, maxval=2000,group="MFI Settings")
_cmf_length = input(20, minval=1,title="CMF Length",group="CMF Settings")


_stoch_smoothK = input(3, "K", minval=1,group="Stoch RSI Settings")
_stoch_smoothD = input(3, "D", minval=1,group="Stoch RSI Settings")
_stoch_lengthRSI = input(14, "RSI Length", minval=1,group="Stoch RSI Settings")
_stoch_lengthStoch = input(14, "Stochastic Length", minval=1,group="Stoch RSI Settings")
_stoch_src = input(close, title="RSI Source",group="Stoch RSI Settings")
//MACD
// Plot colors
col_macd = input(#2962FF, "MACD Line  ", input.color, group="MACD Settings", inline="MACD")
col_signal = input(#FF6D00, "Signal Line  ", input.color, group="MACD Settings", inline="Signal")
col_grow_above = input(#26A69A, "Above   Grow", input.color, group="MACD Settings", inline="Above")
col_fall_above = input(#B2DFDB, "Fall", input.color, group="MACD Settings", inline="Above")
col_grow_below = input(#FFCDD2, "Below Grow", input.color, group="MACD Settings", inline="Below")
col_fall_below = input(#FF5252, "Fall", input.color, group="MACD Settings", inline="Below")



roclen1 = input(10, minval=1, title = "ROC Length #1")
roclen2 = input(15, minval=1, title = "ROC Length #2")
roclen3 = input(20, minval=1, title = "ROC Length #3")
roclen4 = input(30, minval=1, title = "ROC Length #4")
smalen1 = input(10, minval=1, title = "SMA Length #1")
smalen2 = input(10, minval=1, title = "SMA Length #2")
smalen3 = input(10, minval=1, title = "SMA Length #3")
smalen4 = input(15, minval=1, title = "SMA Length #4")
siglen = input(9, minval=1, title = "Signal Line Length")







wolfpack_input1 = input(title="Fast Length", type=input.integer, defval=3)
wolfpack_input2 = input(title="Slow Length", type=input.integer, defval=8)
wolfpack_pivR = input(title="Wolfpack Wave Pivot Lookback Right", defval=1)
wolfpack_pivL = input(title="Wolfpack Wave Pivot Lookback Left", defval=15)
wolfpack_fastmaa = ema(close,wolfpack_input1)
wolfpack_fastmab = ema(close,wolfpack_input2)
wolfpack_src = close
wolfpack_bspread = (wolfpack_fastmaa-wolfpack_fastmab)*1.001
wolfpack_adline = 0
wolfpack_m = wolfpack_bspread > 0 ? color.new(color.lime, 0) : color.new(color.red, 0)
// wolfpack_up = rma(max(change(src), 0), 3)
// wolfpack_down = rma(-min(change(src), 0), 3)

plot(macdkstrsi == "Wolfpack" ? wolfpack_bspread : na, color = wolfpack_m)
plot(macdkstrsi == "Wolfpack" ? 0 : na, title="Zero", color=color.new(color.gray, 40), style=plot.style_line, linewidth=1)


smaroc(roclen, smalen) => sma(roc(close, roclen), smalen)
_kst = smaroc(roclen1, smalen1) + 2 * smaroc(roclen2, smalen2) + 3 * smaroc(roclen3, smalen3) + 4 * smaroc(roclen4, smalen4)
_sig = sma(_kst, siglen)
plot(macdkstrsi == "KST" ? _kst:na, color=#009688, title="KST")
plot(macdkstrsi == "KST" ? _sig:na, color=#F44336, title="Signal")
hline(macdkstrsi == "KST" ? 0:na, title="Zero", color = #787B86)
//rsi
_rsi_up = rma(max(change(_rsi_src), 0), _rsi_len)
_rsi_down = rma(-min(change(_rsi_src), 0), _rsi_len)
_rsi_rsi = _rsi_down == 0 ? 100 : _rsi_up == 0 ? 0 : 100 - (100 / (1 + _rsi_up / _rsi_down))


plot(macdkstrsi == "RSI" ? _rsi_rsi :na, "RSI", color=#7E57C2)
_rsi_band1 = hline(macdkstrsi == "RSI" ? 70 :na, "Upper Band", color=#787B86)
_rsi_bandm = hline(macdkstrsi == "RSI" ? 50 :na, "Middle Band", color=color.new(#787B86, 50))
_rsi_band0 = hline(macdkstrsi == "RSI" ? 30 :na, "Lower Band", color=#787B86)
fill(_rsi_band1, _rsi_band0, color=color.rgb(126, 87, 194, 90), title="Background")

//MFI
_mf_src = hlc3
_mf_upper = sum(volume * (change(_mf_src) <= 0 ? 0 : _mf_src), _mf_length)
_mf_lower = sum(volume * (change(_mf_src) >= 0 ? 0 : _mf_src), _mf_length)
_mf__rsi(_mf_upper, _mf_lower) =>
    100.0 - (100.0 / (1.0 + _mf_upper / _mf_lower))
_mf_mf = _mf__rsi(_mf_upper, _mf_lower)
plot(macdkstrsi == "MFI" ? _mf_mf :na, "MF", color=#7E57C2)
_mf_overbought=hline(macdkstrsi == "MFI" ? 80 :na, title="Overbought", color=#787B86)
_mf_oversold=hline(macdkstrsi == "MFI" ? 20 :na, title="Oversold", color=#787B86)
fill(_mf_overbought, _mf_oversold, color=color.rgb(126, 87, 194, 90), title="Background")



//CMF
_cmf_ad = close==high and close==low or high==low ? 0 : ((2*close-low-high)/(high-low))*volume
_cmf_mf = sum(_cmf_ad, _cmf_length) / sum(volume, _cmf_length)
plot(macdkstrsi == "CMF" ? _cmf_mf : na, color=#43A047, title="MF")
hline(macdkstrsi == "CMF" ? 0  :na, color=#787B86, title="Zero", linestyle=hline.style_dashed)

//Stoch 
_stoch_rsi1 = rsi(_stoch_src, _stoch_lengthRSI)
_stoch_k = sma(stoch(_stoch_rsi1, _stoch_rsi1, _stoch_rsi1, _stoch_lengthStoch), _stoch_smoothK)
_stoch_d = sma(_stoch_k, _stoch_smoothD)
plot(macdkstrsi == "Stochastic RSI" ? _stoch_k:na, "K", color=#2962FF)
plot(macdkstrsi == "Stochastic RSI" ? _stoch_d:na, "D", color=#FF6D00)
_stoch_h0 = hline(macdkstrsi == "Stochastic RSI" ? 80:na, "Upper Band", color=#787B86)
_stoch_h1 = hline(macdkstrsi == "Stochastic RSI" ? 20:na, "Lower Band", color=#787B86)
fill(_stoch_h0, _stoch_h1, color=color.rgb(33, 150, 243, 90), title="Background")




// Calculating
fast_ma = sma_source == "SMA" ? sma(src, fast_length) : ema(src, fast_length)
slow_ma = sma_source == "SMA" ? sma(src, slow_length) : ema(src, slow_length)
macd = fast_ma - slow_ma
signal = sma_signal == "SMA" ? sma(macd, signal_length) : ema(macd, signal_length)
hist = macd - signal
plot(macdkstrsi == "MACD" or macdkstrsi == "MACD Histogram"  ? hist :na, title="Histogram", style=plot.style_columns, color=(hist>=0 ? (hist[1] < hist ? col_grow_above : col_fall_above) : (hist[1] < hist ? col_grow_below : col_fall_below)))
plot(macdkstrsi == "MACD" or macdkstrsi == "MACD Histogram"  ? macd:na, title="MACD", color=col_macd)
plot(macdkstrsi == "MACD" or macdkstrsi == "MACD Histogram"  ? signal:na, title="Signal", color=col_signal)



donttouchzero = input(title="Don't touch the zero line?", defval=true)

lbR = input(title="Pivot Lookback Right", defval=5)
lbL = input(title="Pivot Lookback Left", defval=5)
rangeUpper = input(title="Max of Lookback Range", defval=60)
rangeLower = input(title="Min of Lookback Range", defval=5)
plotBull = input(title="Plot Bullish", defval=true)
plotHiddenBull = input(title="Plot Hidden Bullish", defval=true)
plotBear = input(title="Plot Bearish", defval=true)
plotHiddenBear = input(title="Plot Hidden Bearish", defval=true)
bearColor = color.red
bullColor = color.green
hiddenBullColor = color.green
hiddenBearColor = color.red
textColor = color.white
noneColor = color.new(color.white, 100)

osc = macdkstrsi == "MACD" ? macd : 
 macdkstrsi == "RSI" ? _rsi_rsi :
 macdkstrsi == "MACD Histogram" ? hist : 
 macdkstrsi == "CMF" ? _cmf_mf : 
 macdkstrsi == "Stochastic RSI" ? _stoch_k : 
 macdkstrsi == "KST" ? _kst :
 macdkstrsi == "MFI" ? _mf_mf : 
 macdkstrsi == "Wolfpack" ? wolfpack_bspread :
 _rsi_rsi
 

 
plFound = na(pivotlow(osc, lbL, lbR)) ? false : true
phFound = na(pivothigh(osc, lbL, lbR)) ? false : true
plotshape(phFound ? osc : na, style=shape.triangledown, location=location.absolute, color=color.new(color.red, 70), size=size.tiny)
plotshape(plFound ? osc : na, style=shape.triangleup, location=location.absolute, color=color.new(color.green, 70), size=size.tiny)
_inRange(cond) =>
	bars = barssince(cond == true)
	rangeLower <= bars and bars <= rangeUpper

//------------------------------------------------------------------------------
// Regular Bullish
// Osc: Higher Low

zerooBull = donttouchzero ? osc[lbR] < 0 : true

oscHL = osc[lbR] > valuewhen(plFound, osc[lbR], 1) and _inRange(plFound[1]) 

// Price: Lower Low

priceLL = low[lbR] < valuewhen(plFound, low[lbR], 1)
priceHHZero =  highest(osc, lbL+lbR+5) 
//plot(priceHHZero,title="priceHHZero",color=color.green)
blowzero = donttouchzero ? priceHHZero < 0 : true
bullCond = plotBull and priceLL and oscHL and plFound and blowzero and zerooBull

plot(
     plFound ? osc[lbR] : na,
     offset=-lbR,
     title="Regular Bullish",
     linewidth=2,
     color=(bullCond ? bullColor : noneColor),
     transp=0
     )

plotshape(
	 bullCond ? osc[lbR] : na,
	 offset=-lbR,
	 title="Regular Bullish Label",
	 text=" Bull ",
	 style=shape.labelup,
	 location=location.absolute,
	 color=bullColor,
	 textcolor=textColor,
	 transp=0
	 )

//------------------------------------------------------------------------------
// Hidden Bullish
// Osc: Lower Low

oscLL = osc[lbR] < valuewhen(plFound, osc[lbR], 1) and _inRange(plFound[1])

// Price: Higher Low

priceHL = low[lbR] > valuewhen(plFound, low[lbR], 1)
hiddenBullCond = plotHiddenBull and priceHL and oscLL and plFound

plot(
	 plFound ? osc[lbR] : na,
	 offset=-lbR,
	 title="Hidden Bullish",
	 linewidth=2,
	 color=(hiddenBullCond ? hiddenBullColor : noneColor),
	 transp=0
	 )

plotshape(
	 hiddenBullCond ? osc[lbR] : na,
	 offset=-lbR,
	 title="Hidden Bullish Label",
	 text=" H Bull ",
	 style=shape.labelup,
	 location=location.absolute,
	 color=bullColor,
	 textcolor=textColor,
	 transp=0
	 )

//------------------------------------------------------------------------------
// Regular Bearish
// Osc: Lower High
zerooBear = donttouchzero ? osc[lbR] > 0 : true

oscLH = osc[lbR] < valuewhen(phFound, osc[lbR], 1) and _inRange(phFound[1])  and zerooBear

priceLLZero =  lowest(osc, lbL+lbR+5) 
//plot(priceLLZero,title="priceLLZero", color=color.red)
bearzero = donttouchzero ? priceLLZero > 0 : true


// Price: Higher High

priceHH = high[lbR] > valuewhen(phFound, high[lbR], 1)

bearCond = plotBear and priceHH and oscLH and phFound and bearzero

plot(
	 phFound ? osc[lbR] : na,
	 offset=-lbR,
	 title="Regular Bearish",
	 linewidth=2,
	 color=(bearCond ? bearColor : noneColor),
	 transp=0
	 )

plotshape(
	 bearCond ? osc[lbR] : na,
	 offset=-lbR,
	 title="Regular Bearish Label",
	 text=" Bear ",
	 style=shape.labeldown,
	 location=location.absolute,
	 color=bearColor,
	 textcolor=textColor,
	 transp=0
	 )

//------------------------------------------------------------------------------
// Hidden Bearish
// Osc: Higher High

oscHH = osc[lbR] > valuewhen(phFound, osc[lbR], 1) and _inRange(phFound[1])

// Price: Lower High

priceLH = high[lbR] < valuewhen(phFound, high[lbR], 1)

hiddenBearCond = plotHiddenBear and priceLH and oscHH and phFound

plot(
	 phFound ? osc[lbR] : na,
	 offset=-lbR,
	 title="Hidden Bearish",
	 linewidth=2,
	 color=(hiddenBearCond ? hiddenBearColor : noneColor),
	 transp=0
	 )

plotshape(
	 hiddenBearCond ? osc[lbR] : na,
	 offset=-lbR,
	 title="Hidden Bearish Label",
	 text=" H Bear ",
	 style=shape.labeldown,
	 location=location.absolute,
	 color=bearColor,
	 textcolor=textColor,
	 transp=0
	 )
	 
	 

alertcondition(bullCond, title="Bull", message="Regular Bull Div {{ticker}} XXmin")
alertcondition(bearCond, title="Bear", message="Regular Bear Div {{ticker}} XXmin")
alertcondition(hiddenBullCond, title="H Bull", message="Hidden Bull Div {{ticker}} XXmin")
alertcondition(hiddenBearCond, title="H Bear", message="Hidden Bear Div {{ticker}} XXmin")