//@version=4
study(title="MACD oversold + overbrought",  resolution="")
// This was used in the Ultimate Scalper GPLv2 



//** This DaviddTech indicator is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 2 of the License or (at your option) any later version. **//
//** This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. **//
//** You should have received a copy of the GNU General Public License along with this program. If not, see <https://www.gnu.org/licenses/>  **//




fast_length = input(title="Fast Length", type=input.integer, defval=12)
slow_length = input(title="Slow Length", type=input.integer, defval=26)
src = input(title="Source", type=input.source, defval=close)
signal_length = input(title="Signal Smoothing", type=input.integer, minval = 1, maxval = 50, defval = 9)
sma_source = input(title="Oscillator MA Type", type=input.string, defval="EMA", options=["SMA", "EMA"])
sma_signal = input(title="Signal Line MA Type", type=input.string, defval="EMA", options=["SMA", "EMA"])
// Plot colors
col_macd = input(#2962FF, "MACD Line  ", input.color, group="Color Settings", inline="MACD")
col_signal = input(#FF6D00, "Signal Line  ", input.color, group="Color Settings", inline="Signal")
col_grow_above = input(#26A69A, "Above   Grow", input.color, group="Histogram", inline="Above")
col_fall_above = input(#B2DFDB, "Fall", input.color, group="Histogram", inline="Above")
col_grow_below = input(#FFCDD2, "Below Grow", input.color, group="Histogram", inline="Below")
col_fall_below = input(#FF5252, "Fall", input.color, group="Histogram", inline="Below")
// Calculating
fast_ma = sma_source == "SMA" ? sma(src, fast_length) : ema(src, fast_length)
slow_ma = sma_source == "SMA" ? sma(src, slow_length) : ema(src, slow_length)
macd = fast_ma - slow_ma
signal = sma_signal == "SMA" ? sma(macd, signal_length) : ema(macd, signal_length)
hist = macd - signal

mySma(source, length) =>        // define the function name and parameters
    sum = 0.0
    lenghtdiv = length
    for i=0 to length
        if source[i] == 0
            lenghtdiv := lenghtdiv-1
        else
            sum := sum + source[i]
    sum / lenghtdiv         

macd_offset = input(title="MACD EMA Offset", type=input.float, defval=1.2)

sourcelower = hist < 0 ? hist : 0
sourceupper = hist > 0 ? hist : 0
length = 400
averagelower = mySma(sourcelower, length)*macd_offset   // call our moving average function and store its value in a variable
averageupper = mySma(sourceupper, length)*macd_offset   // call our moving average function and store its value in a variable

plot(averageupper, title="Signal Upper", color=color.red)

plot(averagelower, title="Signal Lower", color=color.green)


plot(hist, title="Histogram", style=plot.style_columns, color=(hist>=0 ? (hist[1] < hist ? col_grow_above : col_fall_above) : (hist[1] < hist ? col_grow_below : col_fall_below)))
plot(macd, title="MACD", color=col_macd)
plot(signal, title="Signal", color=col_signal)