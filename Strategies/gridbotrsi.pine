//@version=5
strategy('Grid Bot RSI Strategy', shorttitle='GridBotRSI', overlay=true)

RSI_LEN = input.int(7, 'RSI Length (7)', minval=1)
No_Grids = input.int(10, 'Number of Grids(10)', minval=3) + 1
Dir = input.string('neutral', 'Market Direction', options=['up', 'neutral', 'down'])
NT = input.string('35-65', 'No Trade Zone', options=['n/a', '45-55', '40-60', '35-65', '30-70'])
Aggression = input.string('low', 'Aggression Level', options=['low', 'med', 'high'])
RSI_Type = input.string('rsx', 'RSI Type', options=['rsi', 'rsx'])
ShowGrids = input(true, 'Show All Grids')

LastSignal = 0
LastSignal_Index = 0
SignalLine = 50.0
Buy = false
Sell = false
Direction = Dir == 'up' ? 1 : Dir == 'down' ? -1 : 0
UpperLimit = 99
LowerLimit = 1
AGGR = Aggression == 'low' ? 0 : Aggression == 'med' ? 1 : 2
NTZ = NT == 'n/a' ? 0 : NT == '45-55' ? 5 : NT == '40-60' ? 10 : NT == '35-75' ? 15 : 20

rsx(src, length) =>
    f8 = 100 * src
    f10 = nz(f8[1])
    v8 = f8 - f10
    f18 = 3 / (length + 2)
    f20 = 1 - f18
    f28 = 0.0
    f28 := f20 * nz(f28[1]) + f18 * v8
    f30 = 0.0
    f30 := f18 * f28 + f20 * nz(f30[1])
    vC = f28 * 1.5 - f30 * 0.5
    f38 = 0.0
    f38 := f20 * nz(f38[1]) + f18 * vC
    f40 = 0.0
    f40 := f18 * f38 + f20 * nz(f40[1])
    v10 = f38 * 1.5 - f40 * 0.5
    f48 = 0.0
    f48 := f20 * nz(f48[1]) + f18 * v10
    f50 = 0.0
    f50 := f18 * f48 + f20 * nz(f50[1])
    v14 = f48 * 1.5 - f50 * 0.5
    f58 = 0.0
    f58 := f20 * nz(f58[1]) + f18 * math.abs(v8)
    f60 = 0.0
    f60 := f18 * f58 + f20 * nz(f60[1])
    v18 = f58 * 1.5 - f60 * 0.5
    f68 = 0.0
    f68 := f20 * nz(f68[1]) + f18 * v18
    f70 = 0.0
    f70 := f18 * f68 + f20 * nz(f70[1])
    v1C = f68 * 1.5 - f70 * 0.5
    f78 = 0.0
    f78 := f20 * nz(f78[1]) + f18 * v1C
    f80 = 0.0
    f80 := f18 * f78 + f20 * nz(f80[1])
    v20 = f78 * 1.5 - f80 * 0.5
    f88_ = 0.0
    f90_ = 0.0
    f88 = 0.0
    f90_ := nz(f90_[1]) == 0 ? 1 : nz(f88[1]) <= nz(f90_[1]) ? nz(f88[1]) + 1 : nz(f90_[1]) + 1
    f88 := nz(f90_[1]) == 0 and length - 1 >= 5 ? length - 1 : 5
    f0 = f88 >= f90_ and f8 != f10 ? 1 : 0
    f90 = f88 == f90_ and f0 == 0 ? 0 : f90_
    v4_ = f88 < f90 and v20 > 0 ? (v14 / v20 + 1) * 50 : 50
    rsx_ = v4_ > 100 ? 100 : v4_ < 0 ? 0 : v4_
    rsx_

RSI = RSI_Type == 'rsx' ? rsx(close, RSI_LEN) : ta.rsi(close, RSI_LEN)

GI = 100 / (No_Grids - 1)
a_grid = array.new_float(No_Grids)
for x = 0 to No_Grids - 1 by 1
    array.set(a_grid, x, GI * x)
array.set(a_grid, 0, LowerLimit)
array.set(a_grid, No_Grids - 1, UpperLimit)

Get_Array_Values(ArrayName, index) =>
    value = array.get(ArrayName, index)
    value

Get_BuyLine_Index() =>
    Index = 0
    for x = 0 to No_Grids - 1 by 1
        BuyLine = Get_Array_Values(a_grid, x)
        Index := RSI[1] < BuyLine and RSI >= BuyLine and RSI[1] <= SignalLine[1] ? x : Index
        Index := RSI[1] > UpperLimit and RSI <= UpperLimit ? No_Grids - 1 : Index
        Index

Get_SellLine_Index() =>
    Index = 0
    for x = 0 to No_Grids - 1 by 1
        SellLine = Get_Array_Values(a_grid, x)
        Index := RSI[1] > SellLine and RSI <= SellLine and RSI[1] >= SignalLine[1] ? x : Index
        Index := RSI[1] < LowerLimit and RSI >= LowerLimit ? 0 : Index
        Index

BuyLine_Index = Get_BuyLine_Index()
SellLine_Index = Get_SellLine_Index()

Buy := BuyLine_Index > 0 ? true : false
Sell := SellLine_Index > 0 ? true : false

if AGGR > 0
    TOP = Get_Array_Values(a_grid, No_Grids - 1 - AGGR)
    BOT = Get_Array_Values(a_grid, 1 + AGGR)
    Buy := RSI > SignalLine[1] and RSI[1] >= BOT ? false : Buy
    Sell := RSI < SignalLine[1] and RSI[1] <= TOP ? false : Sell
    Sell
else
    Buy := RSI[1] > SignalLine[1] - GI ? false : Buy
    Sell := RSI[1] < SignalLine[1] + GI ? false : Sell
    Sell

Buy := RSI[1] > 50 - NTZ and RSI[1] < 50 + NTZ ? false : Buy
Sell := RSI[1] > 50 - NTZ and RSI[1] < 50 + NTZ ? false : Sell

if RSI < 100 or RSI > 1
    Buy := Direction == -1 and RSI >= SignalLine[1] - GI * 2 ? false : Buy
    Sell := Direction == 1 and RSI <= SignalLine[1] + GI * 2 ? false : Sell
    Sell

LastSignal := Buy ? 1 : Sell ? -1 : LastSignal[1]
LastSignal_Index := Buy ? BuyLine_Index : Sell ? SellLine_Index : LastSignal_Index[1]
SignalLine := Get_Array_Values(a_grid, LastSignal_Index)

plot(RSI, color=color.new(color.blue, 0), linewidth=2)
// plot (Buy ? RSI : na, "Buy", color=LimeGreen, linewidth=4, style=plot.style_cross)
// plot (Sell ? RSI : na, "Sell", color=Crimson, linewidth=4, style=plot.style_cross)

// LIVEMODE:: ENABLE / DISABLE
enableLiveTest = input.bool(false, title="Enable live mode and stop backtesting", group="Livemode / Backtesting")
curDate = timestamp('2023, 08, 06')
targetDate = input.time(curDate, title="Start live mode from:", group="Livemode / Backtesting")
// LIVEMODE:: END

if enableLiveTest == false or time > targetDate
    strategy.entry('Buy', strategy.long, when=Buy)
    strategy.entry('Sell', strategy.short, when=Sell)

// Alerts
alertcondition(condition=Buy, title='Buy', message='Buy')
alertcondition(condition=Sell, title='Sell', message='Sell')

