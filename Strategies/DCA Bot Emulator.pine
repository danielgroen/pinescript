//@version=5
strategy('DCA Bot Emulator', overlay=true, pyramiding=999, default_qty_type=strategy.percent_of_equity, initial_capital=100, commission_value=0.055)

source_type = input.string('Weighted Close', 'Source', options=['Close', 'Open', 'High', 'Low', 'HL2', 'HLC3', 'OHLC4', 'Median Body', 'Weighted Close', 'Trend Biased', 'Trend Biased Extreme'])
source_function(type) =>
    if type == 'Close'
        close
    else if type == 'Open'
        open
    else if type == 'High'
        high
    else if type == 'Low'
        low
    else if type == 'HL2'
        hl2
    else if type == 'HL3'
        hlc3
    else if type == 'OHLC4'
        ohlc4
    else if type == 'Median Body'
        (open + close) / 2
    else if type == 'Weighted Close'
        (high + low + 2 * close) / 4
    else if type == 'Trend Biased'
        close > open ? (high + close) / 2 : (low + close) / 2
    else if type == 'Trend Biased Extreme'
        close > open ? high : low
truncate(number, decimals) =>
    factor = math.pow(10, decimals)
    int(number * factor) / factor
// Strategy Inputs
price_deviation = input.float(2.0, title='Price deviation to open safety orders (%)', minval=0.0) / 100
take_profit = input.float(3.0, title='Target Take Profit (%)', step=0.01, minval=0.0) / 100
trailing = input.float(0.0, title='Trailing deviation. Default= 0.0 (%)', step=0.01, minval=0.0) / 100
base_order = input(10.0, title='base order')
safe_order = input(40.0, title='safe order')
safe_order_volume_scale = input.float(1.1, step=0.01, title='Safety order volume scale')
safe_order_step_scale = input.float(1.6, step=0.01, title='Safety order step scale')
max_safe_order = input(30, title='max safe order')

var current_so = 0
var initial_order = 0.0
var previous_high_value = 0.0
var original_ttp_value = 0.0
// Calculate our key levels
take_profit_level = strategy.position_avg_price * (1 + take_profit)

// First Position
// LIVEMODE:: ENABLE / DISABLE
enableLiveTest = input.bool(false, title="Enable live mode and stop backtesting", group="Livemode / Backtesting")
curDate = timestamp('2023, 08, 06')
targetDate = input.time(curDate, title="Start live mode from:", group="Livemode / Backtesting")
// LIVEMODE:: END

if enableLiveTest == false or time > targetDate
    if strategy.position_size == 0 and source_function(source_type) > 0 and previous_high_value == 0.0
        strategy.entry('Long @' + str.tostring(source_function(source_type)), strategy.long, qty=base_order / source_function(source_type))
        initial_order := source_function(source_type)
        current_so := 1
        previous_high_value := 0.0
        original_ttp_value := 0
        original_ttp_value

    threshold = 0.0
    if safe_order_step_scale == 1.0
        threshold := initial_order - initial_order * price_deviation * safe_order_step_scale * current_so
        threshold
    else
        threshold := initial_order - initial_order * ((price_deviation * math.pow(safe_order_step_scale, current_so) - price_deviation) / (safe_order_step_scale - 1))
        threshold

    // Average Down
    if current_so > 0 and source_function(source_type) <= threshold and current_so <= max_safe_order and previous_high_value == 0.0
        strategy.entry('SO ' + str.tostring(current_so) + '@' + str.tostring(source_function(source_type)), direction=strategy.long, qty=safe_order * math.pow(safe_order_volume_scale, current_so - 1) / source_function(source_type))
        current_so += 1
        current_so

    // Take Profit!
    if take_profit_level <= source_function(source_type) and strategy.position_size > 0 or previous_high_value > 0.0
        if trailing > 0.0
            if previous_high_value > 0.0
                if source_function(source_type) >= previous_high_value
                    previous_high_value := source_function(source_type)
                    previous_high_value
                else
                    previous_high_percent = (previous_high_value - original_ttp_value) * 1.0 / original_ttp_value
                    current_high_percent = (source_function(source_type) - original_ttp_value) * 1.0 / original_ttp_value
                    if previous_high_percent - current_high_percent >= trailing
                        strategy.close_all(comment='Close (trailing) @' + str.tostring(truncate(current_high_percent * 100, 3)) + '%')
                        current_so := 0
                        previous_high_value := 0
                        original_ttp_value := 0
                        original_ttp_value
            else
                previous_high_value := source_function(source_type)
                original_ttp_value := source_function(source_type)
                original_ttp_value
        else
            strategy.close_all(comment='Close @' + str.tostring(source_function(source_type)))
            current_so := 0
            previous_high_value := 0
            original_ttp_value := 0
            original_ttp_value
