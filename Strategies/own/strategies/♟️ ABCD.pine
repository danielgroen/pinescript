// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// © tradingmaestro12
//@version=5

// TODO::
// - check if inputs() in libraries also get parsed to this script
// - exit logica
// - increase performance
// https://www.tradingview.com/script/vZaoAA3o-Strategy-Myth-Busting-23-2xEMA-DPO-MYN/

import tradingmaestro12/Tables/3 as Table
import tradingmaestro12/variables/2 as Variables
// import tradingmaestro12/Drawings/1 as Drawings
import tradingmaestro12/Strategy/3 as Strat

strategy('ABCD Patterns [BETA] @tradingmaestro12', 
	 initial_capital=100,
	 commission_type=strategy.commission.percent,
	 commission_value=0.055,
	 slippage=3,
	 default_qty_type=strategy.percent_of_equity,
	 default_qty_value=100,
	 overlay=true)


// ######### ####
// VARIABLES ####
// ░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░


var string long 				= "Long" // VAR Created = on bar zero.
var string short 				= "Short" // without VAR = Created on every bar.
var string both 				= "Both"

var bool longCondition 		= na
var bool shortCondition 	= na
var float positionSize	 	= (strategy.initial_capital + strategy.netprofit) / close

var Colors = Variables.ColorConstructor.new()

var generalLabel = "⚙️ Market conditions"
var performanceLabel = '🚀 Performance'
var strategyGroupLabel = "Strategy"
var timeGroupLabel = '📅 Time and days'

// ######
// MARKET CONDITIONS
// ░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░


// GENERAL
var direction = input.string(both, "Strategy Direction", options=[long, short, both], group=generalLabel)
var precisionBool = input.bool(defval= false, title="Override precision with:", inline="precision", group=generalLabel)
var precisionNumber = input.float(defval= 0, title="", tooltip="Used to round orders. The minimum contract for BTC is 0.001. If so, fill in here: 0.001", inline="precision", group=generalLabel)

// PERFORMANCE
var isPlotTradingWindow = input.bool(true, 'Plot trading window', group = performanceLabel)
var isPlotLogica = input.bool(true, 'Plot logica', group = performanceLabel)

// ░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░
// COMPUTING
// ░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░


// #########
// COND 1

var length = input.int(5, title="ABCD Length", group = strategyGroupLabel)
up1 = ta.pivothigh(high, length, length)
dn1 = ta.pivotlow(low, length, length)
upcount = ta.barssince(not na(up1))
dncount = ta.barssince(not na(dn1))
ppp = not na(dn1) and dncount[1] > upcount[1] ? dn1 : not na(up1) and dncount[1] < upcount[1] ? up1 : na

n = bar_index
a = ta.valuewhen(not na(ppp), n, 2)
b = ta.valuewhen(not na(ppp), n, 1)
c = ta.valuewhen(not na(ppp), n, 0)

av = ta.valuewhen(not na(ppp), ppp, 2)
bv = ta.valuewhen(not na(ppp), ppp, 1)
cv = ta.valuewhen(not na(ppp), ppp, 0)

// PLOTS
plotPpp = isPlotLogica and ppp ? ppp : na
plotUp = isPlotLogica and not na(up1) and dncount[1] < upcount[1] ? up1 : na
plotDn = isPlotLogica and not na(dn1) and dncount[1] > upcount[1] ? dn1 : na

plot(plotUp, title='pivot high', offset=-length)
plot(plotDn, title='pivot low', offset=-length)
plot(plotPpp, title='pivot line', offset=-length)


// #########
// COND 2

var atrInput = input.int(14, 'ATR', group=strategyGroupLabel)
atr = ta.atr(atrInput)

// PLOTS
plot(atr, title="ATR", display=display.data_window)


// ░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░
// ENTRY CONDITIONS 
// ░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░

// ################
// MARKET CONDITIONS

var isDisableFlatGridOrders = input.bool(false, title="Disable flat market entries", group=generalLabel)
avgPrice = ta.sma(close, 100), percentage = 1
flatMarket = math.abs(close - avgPrice) <= (avgPrice * percentage / 100)

// LONG CONDITION
ABCD_bull = av > bv and cv - bv <= 0.89 * (av - bv) and cv - bv >= 0.38 * (av - bv)
ABCD_bull1 = cv - low >= av - bv and ABCD_bull
longCondition := ABCD_bull1 and not ABCD_bull1[1]

// SHORT CONDITION
ABCD_bear = av < bv and bv - cv <= 0.89 * (bv - av) and bv - cv >= 0.38 * (bv - av)
ABCD_bear1 = high - cv >= bv - av and ABCD_bear
shortCondition := ABCD_bear1 and not ABCD_bear1[1]

// ################
// TIME CONDITIONS

var inlineItems = 'isTradingDay'
var mo = input.bool(true, 'M', inline=inlineItems, group=timeGroupLabel)
var tu = input.bool(true, 'T', inline=inlineItems, group=timeGroupLabel)
var we = input.bool(true, 'W', inline=inlineItems, group=timeGroupLabel)
var th = input.bool(true, 'T', inline=inlineItems, group=timeGroupLabel)
var fr = input.bool(true, 'F', inline=inlineItems, group=timeGroupLabel)
var sa = input.bool(true, 'S', inline=inlineItems, group=timeGroupLabel)
var su = input.bool(true, 'S', inline=inlineItems, group=timeGroupLabel)



var enableLiveModeInline = 'liveMode'
var enableLiveMode = input.bool(false, title="Enable live mode from:", inline=enableLiveModeInline, group=timeGroupLabel)
var targetDate = input.time(timestamp('2023, 10, 06'), title="", inline=enableLiveModeInline, group=timeGroupLabel)
inTradingWindow = enableLiveMode == false or time > targetDate

// ############
// ENTRY ORDERS
// ░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░

if precisionBool // TODO:: MAKE 1 FN OUT OF ENTRY ORDERS AND PUT IN STRATEGY LIBRARY
	if positionSize < precisionNumber
		positionSize := precisionNumber

if not isDisableFlatGridOrders or isDisableFlatGridOrders and not flatMarket
	if inTradingWindow and Strat.isAllowedTradingDay(mo, tu, we, th, fr, sa, su)

		if shortCondition
			strategy.entry(short, strategy.short, qty=positionSize)
			// lib.plotOrder()

		if longCondition
			strategy.entry(long, strategy.long, qty=positionSize)


// EXIT  ORDERS
// ░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░



var stopLossPercent = 1
var takeProfitPercent = 10
var float stopLossPrice = na
var float takeProfitPrice = na
var exitGroupLabel = "🚦 Exit conditions"

var stopLossBool = input.bool(defval= false, title="Stop loss with:", inline="StopLoss", group=exitGroupLabel)
var stopLossType = input.string("Percentage", options=["Percentage", "ATR"], title="", tooltip="", inline="StopLoss", group=exitGroupLabel)

var takeProfitBool = input.bool(defval= false, title="Take profit with:", inline="takeProfit", group=exitGroupLabel)
var takeProfitType = input.string("Percentage", options=["Percentage", "ATR", "R:R"], title="", tooltip="", inline="takeProfit", group=exitGroupLabel)

var stopPer = input.float(5.0, title='SL:  % ', inline="stoplossVal", group=exitGroupLabel) / 100
var stopATR = input.float(5.0, title=' ATR', inline="stoplossVal", group=exitGroupLabel) // fixme
// stopATR = strategy.position_avg_price * -atr

var takePer = input.float(10.0, title='TP:  %', inline="takeProfitVal", group=exitGroupLabel) / 100
// takeAtr = strategy.position_avg_price * atr
var takeATR = input.float(5.0, title=' ATR', inline="takeProfitVal", group=exitGroupLabel) // fixme
var takeRR = input.float(5.0, title=' R:R', inline="takeProfitVal", group=exitGroupLabel) // fixme



inLongPosition = strategy.position_size > 0 
inShortPosition = strategy.position_size < 0 

var float entry = na

if inLongPosition or inShortPosition
    entry := strategy.position_avg_price


var float slPrice = na
var float tpPrice = na

if takeProfitBool or stopLossBool
	if inLongPosition
		longStop = strategy.position_avg_price * (1 - stopPer)
		longTake = strategy.position_avg_price * (1 + takePer)
		slPrice := longStop
		tpPrice := longTake
		strategy.exit(id="Close Long", from_entry=long, stop=longStop, limit=longTake, qty_percent = 100, comment_profit = "Long Take Profit", comment_loss = "Long Stop Loss")

	if inShortPosition 
		shortStop = strategy.position_avg_price * (1 + stopPer)
		shortTake = strategy.position_avg_price * (1 - takePer)
		slPrice := shortStop
		tpPrice := shortTake
		strategy.exit(id="Close Short", from_entry=short, stop=shortStop, limit=shortTake, qty_percent = 100, comment_profit = "Long Take Profit", comment_loss = "Long Stop Loss")

// exitStrat(long, short)
// FN BELOW WILL BE THE EXTERNAL EXIT FN
// Strat.exitStrat(
// 	 long, 
// 	 short,
// 	 takeProfitBool,
// 	 stopLossBool,
// 	 stopPer,
// 	 takePer
// 	 )


// Plotting orders below
var bullcolor    = Colors.green
var bearcolor    = Colors.red
var bullcolorb   = #00bbd426
var bearcolorb   = #c2185c27

plotColx = inLongPosition ? bullcolor  : inShortPosition ? bearcolor  : na
plotColy = inLongPosition ? bullcolorb : inShortPosition ? bearcolorb : na
tpcolor  = takeProfitBool ? bullcolor : plotColx
tp = plot(inLongPosition or inShortPosition ? tpPrice : na, 'Take', color=takeProfitBool ? bullcolor : plotColx, style=plot.style_linebr, editable=false)
sl = plot(inLongPosition or inShortPosition ? slPrice : na, 'Stop', color=takeProfitBool ? bearcolor : plotColx, style=plot.style_linebr, editable=false)
en = plot(inLongPosition or inShortPosition ? (inLongPosition and slPrice > entry or inShortPosition and slPrice < entry ? slPrice : entry) : inLongPosition or inShortPosition ? close : na, 'Price', color=stopLossBool ? #b3b4ba : na, style=plot.style_linebr)
fill(tp, en, color=stopLossBool ? bullcolorb : plotColy, editable=false)
fill(sl, en, color=stopLossBool ? bearcolorb : plotColy, editable=false)


// Table.Debug(lastOrderPrice)
	


// PLOTTING
// ░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░


bgcolor(not Strat.isAllowedTradingDay(mo, tu, we, th, fr, sa, su) and isPlotTradingWindow or not inTradingWindow ? color.new(Colors.red, 80) : na)
bgcolor(isPlotTradingWindow and isDisableFlatGridOrders and flatMarket and inTradingWindow ? color.new(Colors.red, 80) : na)


// TABLES
var canPlotTable = input.bool(true, title = "Plot table", group = performanceLabel)
if canPlotTable
	Table.StrategyMetrics()

// if canPlotTable
// 	Table.Debug(lastExit)

// NOTES
// ░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░

// var notes = input.text_area(title = "notes", defval = '')

